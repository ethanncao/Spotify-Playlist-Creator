const express = require("express");

const router = express.Router();

router.post("/top-tracks", async (req, res) => {
  const accessToken = req.body.token;

  if (!accessToken) {
    return res.status(400).json({ error: "Access token is required" });
  }

  try {
    const response = await fetch("https://api.spotify.com/v1/me/top/tracks", {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    });

    const data = await response.json();
    res.json({ tracks: data });
  } catch (err) {
    console.error("Error fetching top tracks:", err);
    res.status(500).json({ error: "Failed to fetch top tracks" });
  }
});

// RECCOMENDED PLAYLIST
router.post("/recc-tracks", async (req, res) => {
  console.log("recc/tracks request hit");
  const tracks = req.body.tracks;
  const accessToken = req.body.accessToken;

  if (!accessToken) {
    return res.status(400).json({ error: "Missing or invalid data" });
  }

  const results = [];

  for (const song of tracks) {
    // getting the url for the song
    const query = encodeURIComponent(`${song.track} ${song.artist}`);
    const url = `https://api.spotify.com/v1/search?q=${query}&type=track&limit=1`;

    //try to fetch the song from spotify web api
    try {
      const response = await fetch(url, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });

      const data = await response.json();
      if (data.tracks?.items?.length > 0) {
        results.push(data.tracks.items);
      }
    } catch (err) {
      console.error("Error searching track:", song, err);
    }
  }

  res.json({ results });
});

// build our playlist from the 20 songs given
router.post("/build-playlist", async (req, res) => {
  const { accessToken, tracks } = req.body;

  if (!accessToken || !Array.isArray(tracks) || tracks.length === 0) {
    return res.status(400).json({ error: "Missing accessToken or tracks[]" });
  }

  // Helper: search one track
  const searchOne = async ({ track, artist }) => {
    const query = encodeURIComponent(`${track} ${artist}`);
    const url = `https://api.spotify.com/v1/search?q=${query}&type=track&limit=1`;
    const resp = await fetch(url, {
      headers: { Authorization: `Bearer ${accessToken}` },
    });
    if (!resp.ok) return null;
    const data = await resp.json();
    return data?.tracks?.items?.[0] ?? null;
  };

  try {
    // 1) Search all suggestions â†’ get up to 20 URIs
    const found = await Promise.all(tracks.map(searchOne));
    const uris = found
      .filter(Boolean)
      .map((t) => t.uri)
      .slice(0, 20);

    if (!uris.length) {
      return res
        .status(400)
        .json({ error: "No matching tracks found on Spotify." });
    }

    // 2) Get current user id
    const meResp = await fetch("https://api.spotify.com/v1/me", {
      headers: { Authorization: `Bearer ${accessToken}` },
    });
    if (!meResp.ok) {
      const txt = await meResp.text();
      return res
        .status(meResp.status)
        .json({ error: "Failed to fetch user", details: txt });
    }
    const me = await meResp.json();

    // 3) Create playlist
    const createResp = await fetch(
      `https://api.spotify.com/v1/users/${me.id}/playlists`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: "playlist",
          description: "Generated by Prompt-to-Playlist",
        }),
      }
    );
    if (!createResp.ok) {
      const txt = await createResp.text();
      return res
        .status(createResp.status)
        .json({ error: "Failed to create playlist", details: txt });
    }
    const playlist = await createResp.json();

    // 4) Add tracks (we're <100 so one call)
    const addResp = await fetch(
      `https://api.spotify.com/v1/playlists/${playlist.id}/tracks`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ uris }),
      }
    );
    if (!addResp.ok) {
      const txt = await addResp.text();
      return res
        .status(addResp.status)
        .json({ error: "Failed to add tracks", details: txt });
    }

    // 5) Done: send URL + id back
    return res.json({
      ok: true,
      playlistId: playlist.id,
      url: playlist.external_urls?.spotify,
      added: uris.length,
    });
  } catch (e) {
    console.error("build-playlist error:", e);
    return res.status(500).json({ error: "Server error building playlist" });
  }
});

module.exports = router;
